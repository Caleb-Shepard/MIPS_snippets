# **************************************************************************** #
#                                                                              #
#                                                             |\               #
#    array_sorter.mips                                  ------| \----          #
#                                                       |    \`  \  |  p       #
#    By: cshepard6055 <cshepard6055@floridapoly.edu>    |  \`-\   \ |  o       #
#                                                       |---\  \   `|  l       #
#    Created: 2019/03/14 11:23:46 by cshepard6055       | ` .\  \   |  y       #
#    Updated: 2019/03/14 03:52:17 by cshepard6055       -------------          #
#                                                                              #
# **************************************************************************** #

# $t0 is used as an input register for functions
# $t3 and $t4 are used as temporary storage for swaps within a function
# $ra, of course, is used to store a PC address (execution return)
# $a0 is used to store the address of an argument passed to a MIPS builtin func
# $a1 is used to store the address of an argument passed to a function
# $a2 is used to temporarily store addresses within a function, normally for $ra

# define constant numerical values
.eqv SAMPLE_ARRAY_SIZE    11
.eqv BYTE_WIDTH           4

.eqv SYSCALL_PRINT_STRING 4
.eqv SYSCALL_PRINT_INT    1
.eqv SYSCALL_READ_INT     5
.eqv SYSCALL_EXIT         10

# define string constants
.data
s_header:       .asciiz "\nThe purpose of this program is to sort an array: "
s_unsorted_arr: .asciiz "\nThe unsorted array has the values (in this order): "
s_result_arr:   .asciiz "\nThe resulting array has the values (in this order): "
s_separator:    .asciiz ", "

# sample unsorted array of 11 elements
sample_array:           .word 99, 102, 54, 60, 21, 34, 90, 42, 90, 22, 23

.text
j main


# pass in array base address in $a1 and array size in $t0
bubble_sort:
    # temporarily store $ra into a2
    move $a2, $ra
    # adjust size given by $t0 to point to last element index
    subi $t0, $t0, 1

    la $t1, ($a1) # get array address
    li $t2, 0     # int i = 0
    li $t5, 0     # current number of bubble sort passes

    iterate_bubblesort:
    # load list element at [0]
    lw $t3, ($t1)
    # begin loop at [1]
    addi $t1, $t1, BYTE_WIDTH
    addi $t2, $t2, 1
    # return if no more iterations; above the loop because t2 changes here
    beq $t2, $t0, return_void
    array_sorting_loop:
        # load current element into $t4
        lw $t4, ($t1)

        # swap current element with previous if previous greater than current
        bgt $t4, $t3, swap_elements
        continue_array_sorting:

        # save elements back into the array
        sw $t4, ($t1)
        subi $t1, $t1, BYTE_WIDTH
        sw $t3, ($t1)
        addi $t1, $t1, BYTE_WIDTH

        beq $t2, $t0, exit_array_sorting_loop

        # move current element into previous element placeholder
        move $t3, $t4
        # advance loop counter
        addi $t2, $t2, 1
        # advance array pointer
        addi $t1, $t1, BYTE_WIDTH

        # repeat the loop
        j array_sorting_loop

    exit_array_sorting_loop:

    # total bubble iterations ++
    addi $t5, $t5, 1

    # get array address
    la $t1, ($a1)
    # advance array starting address
    jal advance_address
    # base_starting_index ++
    move $t2, $t5
    j iterate_bubblesort

    return_void:
    # load our original $ra address back in from $a2
    move $ra, $a2
    # return void
    jr $ra

# HELPER FUNCTION ----------------------------------------------------------
# pass in elements in $t3 and #t4 to be swapped
# uses $t3, $t4, and $t5 and uses $t3 and $t4 for output
swap_elements:
    move $t6, $t3
    move $t3, $t4
    move $t4, $t6

    j continue_array_sorting

# HELPER FUNCTION ----------------------------------------------------------
# pass in address to be advanced
# advances in a for loop by BYTE_WIDTH
advance_address:
    move $t6, $0
    beq  $t5, $t6, address_advanced
        addi $t1, $t1, BYTE_WIDTH
        addi $t6, $t6, 1

    address_advanced:
    jr $ra


# pass in array base address in $a1 and array size in $t0
print_array:
    # temporarily store $ra into a2
    move $a2, $ra

    la $t1, ($a1)    # get array address
    li $t2, 0        # int i = 0
    subi $t0, $t0, 1 # upper bound should match the last index, size-1

    array_print_loop:
        # print list element
        lw $a0, ($t1)
        li $v0, SYSCALL_PRINT_INT
        syscall
        # check for array end
        beq $t2, $t0, exit_array_print_loop
        # print a separator string ', '
        la $a0, s_separator
        li $v0, SYSCALL_PRINT_STRING
        syscall
        # advance loop counter
        addi $t2, $t2, 1
        # advance array pointer
        addi $t1, $t1, BYTE_WIDTH
        # repeat the loop
        j array_print_loop

    exit_array_print_loop:
    # load our original $ra address back in from $a2
    move $ra, $a2
    # return void
    jr $ra


# print our program header to inform the user of its function
print_header:
    li  $v0, SYSCALL_PRINT_STRING
    la $a0, s_header
    syscall

    jr $ra


# print a string stored in $a0
print_string:
    li $v0, SYSCALL_PRINT_STRING
    syscall

    jr $ra


# main body of our program
main:
    # print our header to inform the user of program function
    jal print_header

    # print the initial array
    la $a0, s_unsorted_arr
    jal print_string
    la $a1, sample_array
    li $t0, SAMPLE_ARRAY_SIZE
    jal print_array

    # sort the array
    la $a1, sample_array
    li $t0, SAMPLE_ARRAY_SIZE
    jal bubble_sort

    # print the resulting array
    la $a0, s_result_arr
    jal print_string
    la $a1, sample_array
    li $t0, SAMPLE_ARRAY_SIZE
    jal print_array

    # exit the program
    li $v0, SYSCALL_EXIT
    syscall
